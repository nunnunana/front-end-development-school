@charset "utf-8";
/*! selectors.css/* yamoo9.net, 2016 */ 

/* CSS1 */
/** 
 * 요소 선택자 E 0001
 * 전체 선택자 * 0000
 * 자손 선택자 E(Parent) E(Child)
 * 그룹핑 E, E, E
 */

/**
 * ----------------
 * 요소 선택자
 * -------------- */

body {
	margin: 0;
	/* 글자 크기 변경 */
	/* font-size: 16px; */
	/* 고정 값 px을 상대 값(em: equal M)으로 변경하고자 한다면? */
	/* 현재값 / 상대값 : 20px/16px */
	font-size: 1.25em;
}

h3 {
	margin-top: 0;
	margin-bottom: 0;	
}

/**
 * ----------------
 * 전체 선택자
 * -------------- */

 body * {
 	margin: 0;
 }

/**
 * ----------------
 * 요소 + 그룹핑 + 아이디 + 전체 선택자
 * CSS 선택자는 여러 유형이 조합되어 사용된다.
 * -------------- */

 body, #shoppingGrpTab * {
	margin: 0;
	/* 필요에 따라 특정섹션에만 전체선택자를 주는 것은 나쁘지 않지만, 전체 선택자로 코드를 리셋하는 것은 성능 저하를 불러일으키는 방식임. Reset CSS를 쓰는 것이 아니라 Modernizer를 사용하는 것으로 대체가능 */
 } /* 101점 */

/**
 * ----------------
 * 자식선택자 E(Parent) > E(Child) 좋은 방식이 아님-> 관리를 위해 Class
 * > Child Combinator
 * -------------- */

 /* 직계 자식을 가리키는 선택자 */
#shopping1 > h4 {
	color: #DC513E;
} 
	/* 101점 */

 /* 자식, 자손 모두를 가리키는 선택자 */
#shopping1 h4 {
	color: #00C3DC;
} /* 101점 */

/* 마크업의 정답은 없다, 다만 디자인의 의도와 방향성을 잘 구현하는 것이 정답이 될 수 있음 */

/**
 * ----------------
 * 클래스 선택자 
 * E.class-name (디자인 컨셉[범위 제한]이 명확하지 않은 경우에는 사용을 자제할 것)
 * .class-name (대중적으로 사용되는 방법, 코드 재사용 목적)
 * .class-name1.class-name2 (멀티클래스, 두 클래스가 교집합일때만 적용된다) 
   => 모듈러 css의 구현!! css의최선!! 하나의 요소에 대해 적용
 * .class-name1 .class-name2 
   =>  .class-name1을 가진 요소 .class-name2라는 모든 자손요소를 찾는다.
 * -------------- */

/* p.notice {} p요소가 .notice클래스를 가질 경우에만 적용됨. */
/* inline-block은 inline이 기본이지만 block의 속성도 갖는 속성 */


.button {
	padding: 10px 20px;
	border: 2px solid;
	border-radius: 3px;
	background: #eee;
	font-size:16px;
	color: #fff;
}
.button.btn-buy {
	background: #2A93F5;
	border-color: #2354F5;
}
/* 클래스를 바꿔치기 해도 사용가능, 넣고자 하는 클래스의 순서를 암기할 필요가 없음, IE6 제외 */
.btn-buy.button {
	background: #2A93F5;
	border-color: #2354F5;
}

.button.btn-cancel-buy {
	background: #F5554E;
	border-color:#D90312;
}

/* 클래스 네이밍에 접두사를 통해 의미를 확실히 한다 */

/* CSS2 */
/**
 * ----------------
 * 인접 형제 선택자 E + E 
 * 인접이란 바로 '다음'을 의미한다.
 * 절대적으로 틀(프레임)이 무너지지 않아야 한다.
 * -------------- */

/* #shopping1아래의 모든 ul요소에 적용 */
#shopping1 ul {border: 1px solid red;}

/* #shopping1아래의 h4 인접 ul만 적용 */
#shopping1 h4 + ul {border-color: #00FFE2}

/**
 * ----------------
 * 일반 형제 선택자 E ~ E  
 * -------------- */

#shoppingGrpTab > #shopping1 + h3 {background: #000; color:#fff;} /* #shopping1 바로 다음의 인접한 h3 형제를 찾는다. */
#shoppingGrpTab > #shopping1 ~ h3 {background: red; color: #fff;} /* #shopping1 !!뒤의!! 모든 h3 형제들을 찾는다. */

/* 연습 더해보기 !*/
/**
 * ----------------
 * 속성 선택자 E[attr="value"]
 * IE 7, 8에서 버그가 있음  
 * -------------- */

/* ID 선택자 = 속성 선택자로  변경 */
[id] {border:2px dotted #dedede;} 
/* id를 가지고 있는 모든 요소를 찾는다. 앞쪽에 아무것도 없을 경우 * 이 생략된 것임 */

/* Class 선택자 = 속성 선택자로  변경 */
/*[class] { outline: 3px solid rgba(255, 255, 0, 0.5); }*/
/*[class] { border: 3px solid rgba(255, 255, 0, 0.5); }*/

/*shopping3라는 특정 ID 선택자를 찾고자 한다면 */
/*[id="shopping3"] {
	border: 3px solid #5345FF;
}*/

#shopping3 .screen_out {} /* #shopping3에 screen_out이 포함되기만 하면 적용 */

[id="shopping3"] [class="screen_out"]{
	border: 3px solid #5345FF;
} 
/* #shopping3에 screen_out이어야만 적용, 
또는 class^="screen_out"이면 처음 클래스이 screen_out 
또는 class$="screen_out"이면 마지막 클래스가 screen_out
*/

a[href$=".docx"] {
	display:block; 
	width:100px; 
	height:100px; 
	background: url(../images/1466770242_pdfs.png);
	background-size: cover;
}

a[href$=".hwp"] {
	display:block; 
	width:100px; 
	height:100px; 
	background: url(../images/1466770226_aibs.png);
	background-size: cover;
}

a[href$=".hwp"] {
	display:block; 
	width:100px; 
	height:100px; 
	background: url(../images/1466770234_psds.png);
	background-size: cover;
}
